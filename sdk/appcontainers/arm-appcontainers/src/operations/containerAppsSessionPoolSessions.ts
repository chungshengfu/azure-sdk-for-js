/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ContainerAppsSessionPoolSessions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import {
  Session,
  GenerateSessionsRequest,
  ContainerAppsSessionPoolSessionsGenerateSessionsNextOptionalParams,
  ContainerAppsSessionPoolSessionsGenerateSessionsOptionalParams,
  ContainerAppsSessionPoolSessionsGenerateSessionsResponse,
  ContainerAppsSessionPoolSessionsListBySessionPoolNextOptionalParams,
  ContainerAppsSessionPoolSessionsListBySessionPoolOptionalParams,
  ContainerAppsSessionPoolSessionsListBySessionPoolResponse,
  ContainerAppsSessionPoolSessionsGetOptionalParams,
  ContainerAppsSessionPoolSessionsGetResponse,
  ContainerAppsSessionPoolSessionsGenerateSessionsNextResponse,
  ContainerAppsSessionPoolSessionsListBySessionPoolNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ContainerAppsSessionPoolSessions operations. */
export class ContainerAppsSessionPoolSessionsImpl
  implements ContainerAppsSessionPoolSessions
{
  private readonly client: ContainerAppsAPIClient;

  /**
   * Initialize a new instance of the class ContainerAppsSessionPoolSessions class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerAppsAPIClient) {
    this.client = client;
  }

  /**
   * Generate Sessions from a Session Pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sessionPoolName Name of the Session Pool.
   * @param generateSessionsEnvelope Properties used to generate a session
   * @param options The options parameters.
   */
  public listGenerateSessions(
    resourceGroupName: string,
    sessionPoolName: string,
    generateSessionsEnvelope: GenerateSessionsRequest,
    options?: ContainerAppsSessionPoolSessionsGenerateSessionsOptionalParams,
  ): PagedAsyncIterableIterator<Session> {
    const iter = this.generateSessionsPagingAll(
      resourceGroupName,
      sessionPoolName,
      generateSessionsEnvelope,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.generateSessionsPagingPage(
          resourceGroupName,
          sessionPoolName,
          generateSessionsEnvelope,
          options,
          settings,
        );
      },
    };
  }

  private async *generateSessionsPagingPage(
    resourceGroupName: string,
    sessionPoolName: string,
    generateSessionsEnvelope: GenerateSessionsRequest,
    options?: ContainerAppsSessionPoolSessionsGenerateSessionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Session[]> {
    let result: ContainerAppsSessionPoolSessionsGenerateSessionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._generateSessions(
        resourceGroupName,
        sessionPoolName,
        generateSessionsEnvelope,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._generateSessionsNext(
        resourceGroupName,
        sessionPoolName,
        generateSessionsEnvelope,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *generateSessionsPagingAll(
    resourceGroupName: string,
    sessionPoolName: string,
    generateSessionsEnvelope: GenerateSessionsRequest,
    options?: ContainerAppsSessionPoolSessionsGenerateSessionsOptionalParams,
  ): AsyncIterableIterator<Session> {
    for await (const page of this.generateSessionsPagingPage(
      resourceGroupName,
      sessionPoolName,
      generateSessionsEnvelope,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get the Session Pools in a Session Pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sessionPoolName Name of the Session Pool.
   * @param options The options parameters.
   */
  public listBySessionPool(
    resourceGroupName: string,
    sessionPoolName: string,
    options?: ContainerAppsSessionPoolSessionsListBySessionPoolOptionalParams,
  ): PagedAsyncIterableIterator<Session> {
    const iter = this.listBySessionPoolPagingAll(
      resourceGroupName,
      sessionPoolName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySessionPoolPagingPage(
          resourceGroupName,
          sessionPoolName,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySessionPoolPagingPage(
    resourceGroupName: string,
    sessionPoolName: string,
    options?: ContainerAppsSessionPoolSessionsListBySessionPoolOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Session[]> {
    let result: ContainerAppsSessionPoolSessionsListBySessionPoolResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySessionPool(
        resourceGroupName,
        sessionPoolName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySessionPoolNext(
        resourceGroupName,
        sessionPoolName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySessionPoolPagingAll(
    resourceGroupName: string,
    sessionPoolName: string,
    options?: ContainerAppsSessionPoolSessionsListBySessionPoolOptionalParams,
  ): AsyncIterableIterator<Session> {
    for await (const page of this.listBySessionPoolPagingPage(
      resourceGroupName,
      sessionPoolName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Generate Sessions from a Session Pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sessionPoolName Name of the Session Pool.
   * @param generateSessionsEnvelope Properties used to generate a session
   * @param options The options parameters.
   */
  private _generateSessions(
    resourceGroupName: string,
    sessionPoolName: string,
    generateSessionsEnvelope: GenerateSessionsRequest,
    options?: ContainerAppsSessionPoolSessionsGenerateSessionsOptionalParams,
  ): Promise<ContainerAppsSessionPoolSessionsGenerateSessionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sessionPoolName, generateSessionsEnvelope, options },
      generateSessionsOperationSpec,
    );
  }

  /**
   * Get the properties of a Session.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sessionPoolName Name of the Session Pool.
   * @param name Name of the Session.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sessionPoolName: string,
    name: string,
    options?: ContainerAppsSessionPoolSessionsGetOptionalParams,
  ): Promise<ContainerAppsSessionPoolSessionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sessionPoolName, name, options },
      getOperationSpec,
    );
  }

  /**
   * Get the Session Pools in a Session Pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sessionPoolName Name of the Session Pool.
   * @param options The options parameters.
   */
  private _listBySessionPool(
    resourceGroupName: string,
    sessionPoolName: string,
    options?: ContainerAppsSessionPoolSessionsListBySessionPoolOptionalParams,
  ): Promise<ContainerAppsSessionPoolSessionsListBySessionPoolResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sessionPoolName, options },
      listBySessionPoolOperationSpec,
    );
  }

  /**
   * GenerateSessionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sessionPoolName Name of the Session Pool.
   * @param generateSessionsEnvelope Properties used to generate a session
   * @param nextLink The nextLink from the previous successful call to the GenerateSessions method.
   * @param options The options parameters.
   */
  private _generateSessionsNext(
    resourceGroupName: string,
    sessionPoolName: string,
    generateSessionsEnvelope: GenerateSessionsRequest,
    nextLink: string,
    options?: ContainerAppsSessionPoolSessionsGenerateSessionsNextOptionalParams,
  ): Promise<ContainerAppsSessionPoolSessionsGenerateSessionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sessionPoolName,
        generateSessionsEnvelope,
        nextLink,
        options,
      },
      generateSessionsNextOperationSpec,
    );
  }

  /**
   * ListBySessionPoolNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sessionPoolName Name of the Session Pool.
   * @param nextLink The nextLink from the previous successful call to the ListBySessionPool method.
   * @param options The options parameters.
   */
  private _listBySessionPoolNext(
    resourceGroupName: string,
    sessionPoolName: string,
    nextLink: string,
    options?: ContainerAppsSessionPoolSessionsListBySessionPoolNextOptionalParams,
  ): Promise<ContainerAppsSessionPoolSessionsListBySessionPoolNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sessionPoolName, nextLink, options },
      listBySessionPoolNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const generateSessionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/generateSessions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SessionCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  requestBody: Parameters.generateSessionsEnvelope,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sessionPoolName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Session,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sessionPoolName,
    Parameters.name2,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySessionPoolOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/sessionPools/{sessionPoolName}/sessions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SessionCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sessionPoolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const generateSessionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SessionCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.sessionPoolName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listBySessionPoolNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SessionCollection,
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.sessionPoolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};

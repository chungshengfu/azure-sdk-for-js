/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ClusterRecoveryPoints } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import {
  ClusterRecoveryPoint,
  ClusterRecoveryPointsListByReplicationProtectionClusterNextOptionalParams,
  ClusterRecoveryPointsListByReplicationProtectionClusterOptionalParams,
  ClusterRecoveryPointsListByReplicationProtectionClusterResponse,
  ClusterRecoveryPointsListByReplicationProtectionClusterNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ClusterRecoveryPoints operations. */
export class ClusterRecoveryPointsImpl implements ClusterRecoveryPoints {
  private readonly client: SiteRecoveryManagementClient;

  /**
   * Initialize a new instance of the class ClusterRecoveryPoints class.
   * @param client Reference to the service client
   */
  constructor(client: SiteRecoveryManagementClient) {
    this.client = client;
  }

  /**
   * The list of cluster recovery points.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  public listByReplicationProtectionCluster(
    resourceGroupName: string,
    options?: ClusterRecoveryPointsListByReplicationProtectionClusterOptionalParams,
  ): PagedAsyncIterableIterator<ClusterRecoveryPoint> {
    const iter = this.listByReplicationProtectionClusterPagingAll(
      resourceGroupName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByReplicationProtectionClusterPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByReplicationProtectionClusterPagingPage(
    resourceGroupName: string,
    options?: ClusterRecoveryPointsListByReplicationProtectionClusterOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ClusterRecoveryPoint[]> {
    let result: ClusterRecoveryPointsListByReplicationProtectionClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByReplicationProtectionCluster(
        resourceGroupName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByReplicationProtectionClusterNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByReplicationProtectionClusterPagingAll(
    resourceGroupName: string,
    options?: ClusterRecoveryPointsListByReplicationProtectionClusterOptionalParams,
  ): AsyncIterableIterator<ClusterRecoveryPoint> {
    for await (const page of this.listByReplicationProtectionClusterPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * The list of cluster recovery points.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionCluster(
    resourceGroupName: string,
    options?: ClusterRecoveryPointsListByReplicationProtectionClusterOptionalParams,
  ): Promise<ClusterRecoveryPointsListByReplicationProtectionClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByReplicationProtectionClusterOperationSpec,
    );
  }

  /**
   * ListByReplicationProtectionClusterNext
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByReplicationProtectionCluster method.
   * @param options The options parameters.
   */
  private _listByReplicationProtectionClusterNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ClusterRecoveryPointsListByReplicationProtectionClusterNextOptionalParams,
  ): Promise<ClusterRecoveryPointsListByReplicationProtectionClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByReplicationProtectionClusterNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByReplicationProtectionClusterOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionClusters/{replicationProtectionClusterName}/recoveryPoints",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.ClusterRecoveryPointCollection,
      },
      default: {
        bodyMapper: Mappers.ErrorResponseAutoGenerated,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.resourceGroupName,
      Parameters.subscriptionId,
      Parameters.resourceName2,
      Parameters.fabricName2,
      Parameters.protectionContainerName1,
      Parameters.replicationProtectionClusterName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const listByReplicationProtectionClusterNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.ClusterRecoveryPointCollection,
      },
      default: {
        bodyMapper: Mappers.ErrorResponseAutoGenerated,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.resourceGroupName,
      Parameters.subscriptionId,
      Parameters.nextLink,
      Parameters.resourceName2,
      Parameters.fabricName2,
      Parameters.protectionContainerName1,
      Parameters.replicationProtectionClusterName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PrivateAccesses } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ChaosManagementClient } from "../chaosManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  PrivateAccess,
  PrivateAccessesListAllNextOptionalParams,
  PrivateAccessesListAllOptionalParams,
  PrivateAccessesListAllResponse,
  PrivateAccessesListNextOptionalParams,
  PrivateAccessesListOptionalParams,
  PrivateAccessesListResponse,
  PrivateLinkResource,
  PrivateAccessesGetPrivateLinkResourcesNextOptionalParams,
  PrivateAccessesGetPrivateLinkResourcesOptionalParams,
  PrivateAccessesGetPrivateLinkResourcesResponse,
  PrivateEndpointConnection,
  PrivateAccessesListPrivateEndpointConnectionsNextOptionalParams,
  PrivateAccessesListPrivateEndpointConnectionsOptionalParams,
  PrivateAccessesListPrivateEndpointConnectionsResponse,
  PrivateAccessesGetOptionalParams,
  PrivateAccessesGetResponse,
  PrivateAccessesCreateOrUpdateOptionalParams,
  PrivateAccessesCreateOrUpdateResponse,
  PrivateAccessPatch,
  PrivateAccessesPatchOptionalParams,
  PrivateAccessesPatchResponse,
  PrivateAccessesDeleteOptionalParams,
  PrivateAccessesDeleteResponse,
  PrivateAccessesGetAPrivateEndpointConnectionOptionalParams,
  PrivateAccessesGetAPrivateEndpointConnectionResponse,
  PrivateAccessesDeleteAPrivateEndpointConnectionOptionalParams,
  PrivateAccessesDeleteAPrivateEndpointConnectionResponse,
  PrivateAccessesListAllNextResponse,
  PrivateAccessesListNextResponse,
  PrivateAccessesGetPrivateLinkResourcesNextResponse,
  PrivateAccessesListPrivateEndpointConnectionsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateAccesses operations. */
export class PrivateAccessesImpl implements PrivateAccesses {
  private readonly client: ChaosManagementClient;

  /**
   * Initialize a new instance of the class PrivateAccesses class.
   * @param client Reference to the service client
   */
  constructor(client: ChaosManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of private access resources in a subscription.
   * @param options The options parameters.
   */
  public listAll(
    options?: PrivateAccessesListAllOptionalParams,
  ): PagedAsyncIterableIterator<PrivateAccess> {
    const iter = this.listAllPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllPagingPage(options, settings);
      },
    };
  }

  private async *listAllPagingPage(
    options?: PrivateAccessesListAllOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PrivateAccess[]> {
    let result: PrivateAccessesListAllResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAll(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllPagingAll(
    options?: PrivateAccessesListAllOptionalParams,
  ): AsyncIterableIterator<PrivateAccess> {
    for await (const page of this.listAllPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of private access resources in a resource group.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: PrivateAccessesListOptionalParams,
  ): PagedAsyncIterableIterator<PrivateAccess> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: PrivateAccessesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PrivateAccess[]> {
    let result: PrivateAccessesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: PrivateAccessesListOptionalParams,
  ): AsyncIterableIterator<PrivateAccess> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Gets the private link resources possible under private access resource
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param options The options parameters.
   */
  public listPrivateLinkResources(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesGetPrivateLinkResourcesOptionalParams,
  ): PagedAsyncIterableIterator<PrivateLinkResource> {
    const iter = this.getPrivateLinkResourcesPagingAll(
      resourceGroupName,
      privateAccessName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getPrivateLinkResourcesPagingPage(
          resourceGroupName,
          privateAccessName,
          options,
          settings,
        );
      },
    };
  }

  private async *getPrivateLinkResourcesPagingPage(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesGetPrivateLinkResourcesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PrivateLinkResource[]> {
    let result: PrivateAccessesGetPrivateLinkResourcesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getPrivateLinkResources(
        resourceGroupName,
        privateAccessName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getPrivateLinkResourcesNext(
        resourceGroupName,
        privateAccessName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getPrivateLinkResourcesPagingAll(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesGetPrivateLinkResourcesOptionalParams,
  ): AsyncIterableIterator<PrivateLinkResource> {
    for await (const page of this.getPrivateLinkResourcesPagingPage(
      resourceGroupName,
      privateAccessName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List information about private endpoint connections under a private access resource
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param options The options parameters.
   */
  public listPrivateEndpointConnections(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesListPrivateEndpointConnectionsOptionalParams,
  ): PagedAsyncIterableIterator<PrivateEndpointConnection> {
    const iter = this.listPrivateEndpointConnectionsPagingAll(
      resourceGroupName,
      privateAccessName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPrivateEndpointConnectionsPagingPage(
          resourceGroupName,
          privateAccessName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPrivateEndpointConnectionsPagingPage(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesListPrivateEndpointConnectionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PrivateEndpointConnection[]> {
    let result: PrivateAccessesListPrivateEndpointConnectionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPrivateEndpointConnections(
        resourceGroupName,
        privateAccessName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPrivateEndpointConnectionsNext(
        resourceGroupName,
        privateAccessName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPrivateEndpointConnectionsPagingAll(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesListPrivateEndpointConnectionsOptionalParams,
  ): AsyncIterableIterator<PrivateEndpointConnection> {
    for await (const page of this.listPrivateEndpointConnectionsPagingPage(
      resourceGroupName,
      privateAccessName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of private access resources in a subscription.
   * @param options The options parameters.
   */
  private _listAll(
    options?: PrivateAccessesListAllOptionalParams,
  ): Promise<PrivateAccessesListAllResponse> {
    return this.client.sendOperationRequest({ options }, listAllOperationSpec);
  }

  /**
   * Get a list of private access resources in a resource group.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: PrivateAccessesListOptionalParams,
  ): Promise<PrivateAccessesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec,
    );
  }

  /**
   * Get a private access resource
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesGetOptionalParams,
  ): Promise<PrivateAccessesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateAccessName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a private access
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param privateAccess private access resource to be created or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    privateAccessName: string,
    privateAccess: PrivateAccess,
    options?: PrivateAccessesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PrivateAccessesCreateOrUpdateResponse>,
      PrivateAccessesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PrivateAccessesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, privateAccessName, privateAccess, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      PrivateAccessesCreateOrUpdateResponse,
      OperationState<PrivateAccessesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a private access
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param privateAccess private access resource to be created or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    privateAccessName: string,
    privateAccess: PrivateAccess,
    options?: PrivateAccessesCreateOrUpdateOptionalParams,
  ): Promise<PrivateAccessesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      privateAccessName,
      privateAccess,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch a private access tags
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param privateAccessPatch private access resource's tags to be updated.
   * @param options The options parameters.
   */
  async beginPatch(
    resourceGroupName: string,
    privateAccessName: string,
    privateAccessPatch: PrivateAccessPatch,
    options?: PrivateAccessesPatchOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PrivateAccessesPatchResponse>,
      PrivateAccessesPatchResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PrivateAccessesPatchResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        privateAccessName,
        privateAccessPatch,
        options,
      },
      spec: patchOperationSpec,
    });
    const poller = await createHttpPoller<
      PrivateAccessesPatchResponse,
      OperationState<PrivateAccessesPatchResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch a private access tags
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param privateAccessPatch private access resource's tags to be updated.
   * @param options The options parameters.
   */
  async beginPatchAndWait(
    resourceGroupName: string,
    privateAccessName: string,
    privateAccessPatch: PrivateAccessPatch,
    options?: PrivateAccessesPatchOptionalParams,
  ): Promise<PrivateAccessesPatchResponse> {
    const poller = await this.beginPatch(
      resourceGroupName,
      privateAccessName,
      privateAccessPatch,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a private access
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PrivateAccessesDeleteResponse>,
      PrivateAccessesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PrivateAccessesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, privateAccessName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      PrivateAccessesDeleteResponse,
      OperationState<PrivateAccessesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a private access
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesDeleteOptionalParams,
  ): Promise<PrivateAccessesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      privateAccessName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the private link resources possible under private access resource
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param options The options parameters.
   */
  private _getPrivateLinkResources(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesGetPrivateLinkResourcesOptionalParams,
  ): Promise<PrivateAccessesGetPrivateLinkResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateAccessName, options },
      getPrivateLinkResourcesOperationSpec,
    );
  }

  /**
   * Gets information about a private endpoint connection under a private access resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection.
   * @param options The options parameters.
   */
  getAPrivateEndpointConnection(
    resourceGroupName: string,
    privateAccessName: string,
    privateEndpointConnectionName: string,
    options?: PrivateAccessesGetAPrivateEndpointConnectionOptionalParams,
  ): Promise<PrivateAccessesGetAPrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateAccessName,
        privateEndpointConnectionName,
        options,
      },
      getAPrivateEndpointConnectionOperationSpec,
    );
  }

  /**
   * Deletes a private endpoint connection under a private access resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection.
   * @param options The options parameters.
   */
  async beginDeleteAPrivateEndpointConnection(
    resourceGroupName: string,
    privateAccessName: string,
    privateEndpointConnectionName: string,
    options?: PrivateAccessesDeleteAPrivateEndpointConnectionOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PrivateAccessesDeleteAPrivateEndpointConnectionResponse>,
      PrivateAccessesDeleteAPrivateEndpointConnectionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PrivateAccessesDeleteAPrivateEndpointConnectionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        privateAccessName,
        privateEndpointConnectionName,
        options,
      },
      spec: deleteAPrivateEndpointConnectionOperationSpec,
    });
    const poller = await createHttpPoller<
      PrivateAccessesDeleteAPrivateEndpointConnectionResponse,
      OperationState<PrivateAccessesDeleteAPrivateEndpointConnectionResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a private endpoint connection under a private access resource.
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param privateEndpointConnectionName The name of the private endpoint connection.
   * @param options The options parameters.
   */
  async beginDeleteAPrivateEndpointConnectionAndWait(
    resourceGroupName: string,
    privateAccessName: string,
    privateEndpointConnectionName: string,
    options?: PrivateAccessesDeleteAPrivateEndpointConnectionOptionalParams,
  ): Promise<PrivateAccessesDeleteAPrivateEndpointConnectionResponse> {
    const poller = await this.beginDeleteAPrivateEndpointConnection(
      resourceGroupName,
      privateAccessName,
      privateEndpointConnectionName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * List information about private endpoint connections under a private access resource
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param options The options parameters.
   */
  private _listPrivateEndpointConnections(
    resourceGroupName: string,
    privateAccessName: string,
    options?: PrivateAccessesListPrivateEndpointConnectionsOptionalParams,
  ): Promise<PrivateAccessesListPrivateEndpointConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateAccessName, options },
      listPrivateEndpointConnectionsOperationSpec,
    );
  }

  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  private _listAllNext(
    nextLink: string,
    options?: PrivateAccessesListAllNextOptionalParams,
  ): Promise<PrivateAccessesListAllNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAllNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PrivateAccessesListNextOptionalParams,
  ): Promise<PrivateAccessesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * GetPrivateLinkResourcesNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param nextLink The nextLink from the previous successful call to the GetPrivateLinkResources
   *                 method.
   * @param options The options parameters.
   */
  private _getPrivateLinkResourcesNext(
    resourceGroupName: string,
    privateAccessName: string,
    nextLink: string,
    options?: PrivateAccessesGetPrivateLinkResourcesNextOptionalParams,
  ): Promise<PrivateAccessesGetPrivateLinkResourcesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateAccessName, nextLink, options },
      getPrivateLinkResourcesNextOperationSpec,
    );
  }

  /**
   * ListPrivateEndpointConnectionsNext
   * @param resourceGroupName String that represents an Azure resource group.
   * @param privateAccessName The name of the private access resource that is being created. Supported
   *                          characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters.
   * @param nextLink The nextLink from the previous successful call to the ListPrivateEndpointConnections
   *                 method.
   * @param options The options parameters.
   */
  private _listPrivateEndpointConnectionsNext(
    resourceGroupName: string,
    privateAccessName: string,
    nextLink: string,
    options?: PrivateAccessesListPrivateEndpointConnectionsNextOptionalParams,
  ): Promise<PrivateAccessesListPrivateEndpointConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, privateAccessName, nextLink, options },
      listPrivateEndpointConnectionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAllOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/privateAccesses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccessListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccessListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateAccessName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess,
    },
    201: {
      bodyMapper: Mappers.PrivateAccess,
    },
    202: {
      bodyMapper: Mappers.PrivateAccess,
    },
    204: {
      bodyMapper: Mappers.PrivateAccess,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.privateAccess,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateAccessName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const patchOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccess,
    },
    201: {
      bodyMapper: Mappers.PrivateAccess,
    },
    202: {
      bodyMapper: Mappers.PrivateAccess,
    },
    204: {
      bodyMapper: Mappers.PrivateAccess,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.privateAccessPatch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateAccessName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.PrivateAccessesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.PrivateAccessesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.PrivateAccessesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.PrivateAccessesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateAccessName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getPrivateLinkResourcesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateLinkResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateAccessName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getAPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateAccessName,
    Parameters.privateEndpointConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteAPrivateEndpointConnectionOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
      200: {
        headersMapper:
          Mappers.PrivateAccessesDeleteAPrivateEndpointConnectionHeaders,
      },
      201: {
        headersMapper:
          Mappers.PrivateAccessesDeleteAPrivateEndpointConnectionHeaders,
      },
      202: {
        headersMapper:
          Mappers.PrivateAccessesDeleteAPrivateEndpointConnectionHeaders,
      },
      204: {
        headersMapper:
          Mappers.PrivateAccessesDeleteAPrivateEndpointConnectionHeaders,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.privateAccessName,
      Parameters.privateEndpointConnectionName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const listPrivateEndpointConnectionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/privateAccesses/{privateAccessName}/privateEndpointConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateAccessName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccessListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateAccessListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getPrivateLinkResourcesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.privateAccessName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listPrivateEndpointConnectionsNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.PrivateEndpointConnectionListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.nextLink,
      Parameters.privateAccessName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };

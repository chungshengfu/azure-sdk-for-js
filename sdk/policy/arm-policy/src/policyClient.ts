/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  DataPolicyManifestsImpl,
  PolicyDefinitionsImpl,
  PolicyDefinitionVersionsImpl,
  PolicySetDefinitionsImpl,
  PolicySetDefinitionVersionsImpl,
  PolicyAssignmentsImpl,
  PolicyExemptionsImpl,
  VariablesImpl,
  VariableValuesImpl,
} from "./operations";
import {
  DataPolicyManifests,
  PolicyDefinitions,
  PolicyDefinitionVersions,
  PolicySetDefinitions,
  PolicySetDefinitionVersions,
  PolicyAssignments,
  PolicyExemptions,
  Variables,
  VariableValues,
} from "./operationsInterfaces";
import { PolicyClientOptionalParams } from "./models";

export class PolicyClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId?: string;
  policyDefinitionName: string;
  policyDefinitionVersion: string;
  policySetDefinitionName: string;

  /**
   * Initializes a new instance of the PolicyClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param policySetDefinitionName The name of the policy set definition.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    policySetDefinitionName: string,
    options?: PolicyClientOptionalParams,
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    policySetDefinitionName: string,
    options?: PolicyClientOptionalParams,
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    policySetDefinitionName: string,
    subscriptionIdOrOptions?: PolicyClientOptionalParams | string,
    options?: PolicyClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (policyDefinitionName === undefined) {
      throw new Error("'policyDefinitionName' cannot be null");
    }
    if (policyDefinitionVersion === undefined) {
      throw new Error("'policyDefinitionVersion' cannot be null");
    }
    if (policySetDefinitionName === undefined) {
      throw new Error("'policySetDefinitionName' cannot be null");
    }

    let subscriptionId: string | undefined;

    if (typeof subscriptionIdOrOptions === "string") {
      subscriptionId = subscriptionIdOrOptions;
    } else if (typeof subscriptionIdOrOptions === "object") {
      options = subscriptionIdOrOptions;
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: PolicyClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-policy/6.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;
    this.policyDefinitionName = policyDefinitionName;
    this.policyDefinitionVersion = policyDefinitionVersion;
    this.policySetDefinitionName = policySetDefinitionName;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.dataPolicyManifests = new DataPolicyManifestsImpl(this);
    this.policyDefinitions = new PolicyDefinitionsImpl(this);
    this.policyDefinitionVersions = new PolicyDefinitionVersionsImpl(this);
    this.policySetDefinitions = new PolicySetDefinitionsImpl(this);
    this.policySetDefinitionVersions = new PolicySetDefinitionVersionsImpl(
      this,
    );
    this.policyAssignments = new PolicyAssignmentsImpl(this);
    this.policyExemptions = new PolicyExemptionsImpl(this);
    this.variables = new VariablesImpl(this);
    this.variableValues = new VariableValuesImpl(this);
  }

  dataPolicyManifests: DataPolicyManifests;
  policyDefinitions: PolicyDefinitions;
  policyDefinitionVersions: PolicyDefinitionVersions;
  policySetDefinitions: PolicySetDefinitions;
  policySetDefinitionVersions: PolicySetDefinitionVersions;
  policyAssignments: PolicyAssignments;
  policyExemptions: PolicyExemptions;
  variables: Variables;
  variableValues: VariableValues;
}

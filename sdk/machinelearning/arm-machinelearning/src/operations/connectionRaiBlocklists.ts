/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ConnectionRaiBlocklists } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningServices } from "../azureMachineLearningServices";
import {
  RaiBlocklistPropertiesBasicResource,
  ConnectionRaiBlocklistsListNextOptionalParams,
  ConnectionRaiBlocklistsListOptionalParams,
  ConnectionRaiBlocklistsListResponse,
  ConnectionRaiBlocklistsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConnectionRaiBlocklists operations. */
export class ConnectionRaiBlocklistsImpl implements ConnectionRaiBlocklists {
  private readonly client: AzureMachineLearningServices;

  /**
   * Initialize a new instance of the class ConnectionRaiBlocklists class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMachineLearningServices) {
    this.client = client;
  }

  /**
   * Gets the custom blocklists associated with the Azure OpenAI connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    options?: ConnectionRaiBlocklistsListOptionalParams,
  ): PagedAsyncIterableIterator<RaiBlocklistPropertiesBasicResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      workspaceName,
      connectionName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          workspaceName,
          connectionName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    options?: ConnectionRaiBlocklistsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RaiBlocklistPropertiesBasicResource[]> {
    let result: ConnectionRaiBlocklistsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        workspaceName,
        connectionName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        workspaceName,
        connectionName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    options?: ConnectionRaiBlocklistsListOptionalParams,
  ): AsyncIterableIterator<RaiBlocklistPropertiesBasicResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      workspaceName,
      connectionName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the custom blocklists associated with the Azure OpenAI connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    options?: ConnectionRaiBlocklistsListOptionalParams,
  ): Promise<ConnectionRaiBlocklistsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, connectionName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    nextLink: string,
    options?: ConnectionRaiBlocklistsListNextOptionalParams,
  ): Promise<ConnectionRaiBlocklistsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, connectionName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiBlocklists",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RaiBlocklistPropertiesBasicResourceArmPaginatedResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RaiBlocklistPropertiesBasicResourceArmPaginatedResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};

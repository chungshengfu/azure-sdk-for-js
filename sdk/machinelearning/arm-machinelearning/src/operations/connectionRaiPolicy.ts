/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ConnectionRaiPolicy } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningServices } from "../azureMachineLearningServices";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ConnectionRaiPolicyDeleteOptionalParams,
  ConnectionRaiPolicyDeleteResponse,
  ConnectionRaiPolicyGetOptionalParams,
  ConnectionRaiPolicyGetResponse,
  RaiPolicyPropertiesBasicResource,
  ConnectionRaiPolicyCreateOptionalParams,
  ConnectionRaiPolicyCreateResponse,
} from "../models";

/** Class containing ConnectionRaiPolicy operations. */
export class ConnectionRaiPolicyImpl implements ConnectionRaiPolicy {
  private readonly client: AzureMachineLearningServices;

  /**
   * Initialize a new instance of the class ConnectionRaiPolicy class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMachineLearningServices) {
    this.client = client;
  }

  /**
   * Deletes the specified Content Filters associated with the Azure OpenAI connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param raiPolicyName Name of the Rai Policy.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    raiPolicyName: string,
    options?: ConnectionRaiPolicyDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectionRaiPolicyDeleteResponse>,
      ConnectionRaiPolicyDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectionRaiPolicyDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        workspaceName,
        connectionName,
        raiPolicyName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectionRaiPolicyDeleteResponse,
      OperationState<ConnectionRaiPolicyDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the specified Content Filters associated with the Azure OpenAI connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param raiPolicyName Name of the Rai Policy.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    raiPolicyName: string,
    options?: ConnectionRaiPolicyDeleteOptionalParams,
  ): Promise<ConnectionRaiPolicyDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      workspaceName,
      connectionName,
      raiPolicyName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the specified Content Filters associated with the Azure OpenAI connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param raiPolicyName Name of the Rai Policy.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    raiPolicyName: string,
    options?: ConnectionRaiPolicyGetOptionalParams,
  ): Promise<ConnectionRaiPolicyGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        connectionName,
        raiPolicyName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Update the state of specified Content Filters associated with the Azure OpenAI connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param raiPolicyName Name of the Rai Policy.
   * @param body Azure OpenAI Content Filters resource.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    raiPolicyName: string,
    body: RaiPolicyPropertiesBasicResource,
    options?: ConnectionRaiPolicyCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectionRaiPolicyCreateResponse>,
      ConnectionRaiPolicyCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ConnectionRaiPolicyCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        workspaceName,
        connectionName,
        raiPolicyName,
        body,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ConnectionRaiPolicyCreateResponse,
      OperationState<ConnectionRaiPolicyCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the state of specified Content Filters associated with the Azure OpenAI connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName Azure Machine Learning Workspace Name
   * @param connectionName Friendly name of the workspace connection
   * @param raiPolicyName Name of the Rai Policy.
   * @param body Azure OpenAI Content Filters resource.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    connectionName: string,
    raiPolicyName: string,
    body: RaiPolicyPropertiesBasicResource,
    options?: ConnectionRaiPolicyCreateOptionalParams,
  ): Promise<ConnectionRaiPolicyCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      workspaceName,
      connectionName,
      raiPolicyName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ConnectionRaiPolicyDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ConnectionRaiPolicyDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ConnectionRaiPolicyDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ConnectionRaiPolicyDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName,
    Parameters.raiPolicyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RaiPolicyPropertiesBasicResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName,
    Parameters.raiPolicyName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RaiPolicyPropertiesBasicResource,
    },
    201: {
      bodyMapper: Mappers.RaiPolicyPropertiesBasicResource,
    },
    202: {
      bodyMapper: Mappers.RaiPolicyPropertiesBasicResource,
    },
    204: {
      bodyMapper: Mappers.RaiPolicyPropertiesBasicResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body53,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName,
    Parameters.raiPolicyName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};

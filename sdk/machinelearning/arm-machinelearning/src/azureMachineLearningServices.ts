/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  UsagesImpl,
  VirtualMachineSizesImpl,
  QuotasImpl,
  ComputeOperationsImpl,
  CapacityReservationGroupsImpl,
  RegistryCodeContainersImpl,
  RegistryCodeVersionsImpl,
  RegistryComponentContainersImpl,
  RegistryComponentVersionsImpl,
  RegistryDataContainersImpl,
  RegistryDataVersionsImpl,
  RegistryDataReferencesImpl,
  RegistryEnvironmentContainersImpl,
  RegistryEnvironmentVersionsImpl,
  MarketplaceSubscriptionsImpl,
  RegistryModelContainersImpl,
  RegistryModelVersionsImpl,
  BatchEndpointsImpl,
  BatchDeploymentsImpl,
  CodeContainersImpl,
  CodeVersionsImpl,
  ComponentContainersImpl,
  ComponentVersionsImpl,
  DataContainersImpl,
  DataVersionsImpl,
  DatastoresImpl,
  EnvironmentContainersImpl,
  EnvironmentVersionsImpl,
  FeaturesetContainersImpl,
  FeaturesImpl,
  FeaturesetVersionsImpl,
  FeaturestoreEntityContainersImpl,
  FeaturestoreEntityVersionsImpl,
  InferencePoolsImpl,
  InferenceEndpointsImpl,
  InferenceGroupsImpl,
  JobsImpl,
  LabelingJobsImpl,
  ModelContainersImpl,
  ModelVersionsImpl,
  OnlineEndpointsImpl,
  OnlineDeploymentsImpl,
  SchedulesImpl,
  ServerlessEndpointsImpl,
  RegistriesImpl,
  WorkspaceFeaturesImpl,
  OperationsImpl,
  WorkspacesImpl,
  WorkspaceConnectionsImpl,
  ConnectionImpl,
  ConnectionRaiBlocklistsImpl,
  ConnectionRaiBlocklistImpl,
  ConnectionRaiBlocklistItemImpl,
  ConnectionRaiBlocklistItemsImpl,
  ConnectionRaiPoliciesImpl,
  ConnectionRaiPolicyImpl,
  EndpointDeploymentImpl,
  EndpointOperationsImpl,
  RaiPoliciesImpl,
  RaiPolicyImpl,
  ManagedNetworkSettingsRuleImpl,
  PrivateEndpointConnectionsImpl,
  PrivateLinkResourcesImpl,
  ManagedNetworkProvisionsImpl,
} from "./operations";
import {
  Usages,
  VirtualMachineSizes,
  Quotas,
  ComputeOperations,
  CapacityReservationGroups,
  RegistryCodeContainers,
  RegistryCodeVersions,
  RegistryComponentContainers,
  RegistryComponentVersions,
  RegistryDataContainers,
  RegistryDataVersions,
  RegistryDataReferences,
  RegistryEnvironmentContainers,
  RegistryEnvironmentVersions,
  MarketplaceSubscriptions,
  RegistryModelContainers,
  RegistryModelVersions,
  BatchEndpoints,
  BatchDeployments,
  CodeContainers,
  CodeVersions,
  ComponentContainers,
  ComponentVersions,
  DataContainers,
  DataVersions,
  Datastores,
  EnvironmentContainers,
  EnvironmentVersions,
  FeaturesetContainers,
  Features,
  FeaturesetVersions,
  FeaturestoreEntityContainers,
  FeaturestoreEntityVersions,
  InferencePools,
  InferenceEndpoints,
  InferenceGroups,
  Jobs,
  LabelingJobs,
  ModelContainers,
  ModelVersions,
  OnlineEndpoints,
  OnlineDeployments,
  Schedules,
  ServerlessEndpoints,
  Registries,
  WorkspaceFeatures,
  Operations,
  Workspaces,
  WorkspaceConnections,
  Connection,
  ConnectionRaiBlocklists,
  ConnectionRaiBlocklist,
  ConnectionRaiBlocklistItem,
  ConnectionRaiBlocklistItems,
  ConnectionRaiPolicies,
  ConnectionRaiPolicy,
  EndpointDeployment,
  EndpointOperations,
  RaiPolicies,
  RaiPolicy,
  ManagedNetworkSettingsRule,
  PrivateEndpointConnections,
  PrivateLinkResources,
  ManagedNetworkProvisions,
} from "./operationsInterfaces";
import { AzureMachineLearningServicesOptionalParams } from "./models";

export class AzureMachineLearningServices extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the AzureMachineLearningServices class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AzureMachineLearningServicesOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AzureMachineLearningServicesOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-machinelearning/3.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2024-04-01-preview";
    this.usages = new UsagesImpl(this);
    this.virtualMachineSizes = new VirtualMachineSizesImpl(this);
    this.quotas = new QuotasImpl(this);
    this.computeOperations = new ComputeOperationsImpl(this);
    this.capacityReservationGroups = new CapacityReservationGroupsImpl(this);
    this.registryCodeContainers = new RegistryCodeContainersImpl(this);
    this.registryCodeVersions = new RegistryCodeVersionsImpl(this);
    this.registryComponentContainers = new RegistryComponentContainersImpl(
      this,
    );
    this.registryComponentVersions = new RegistryComponentVersionsImpl(this);
    this.registryDataContainers = new RegistryDataContainersImpl(this);
    this.registryDataVersions = new RegistryDataVersionsImpl(this);
    this.registryDataReferences = new RegistryDataReferencesImpl(this);
    this.registryEnvironmentContainers = new RegistryEnvironmentContainersImpl(
      this,
    );
    this.registryEnvironmentVersions = new RegistryEnvironmentVersionsImpl(
      this,
    );
    this.marketplaceSubscriptions = new MarketplaceSubscriptionsImpl(this);
    this.registryModelContainers = new RegistryModelContainersImpl(this);
    this.registryModelVersions = new RegistryModelVersionsImpl(this);
    this.batchEndpoints = new BatchEndpointsImpl(this);
    this.batchDeployments = new BatchDeploymentsImpl(this);
    this.codeContainers = new CodeContainersImpl(this);
    this.codeVersions = new CodeVersionsImpl(this);
    this.componentContainers = new ComponentContainersImpl(this);
    this.componentVersions = new ComponentVersionsImpl(this);
    this.dataContainers = new DataContainersImpl(this);
    this.dataVersions = new DataVersionsImpl(this);
    this.datastores = new DatastoresImpl(this);
    this.environmentContainers = new EnvironmentContainersImpl(this);
    this.environmentVersions = new EnvironmentVersionsImpl(this);
    this.featuresetContainers = new FeaturesetContainersImpl(this);
    this.features = new FeaturesImpl(this);
    this.featuresetVersions = new FeaturesetVersionsImpl(this);
    this.featurestoreEntityContainers = new FeaturestoreEntityContainersImpl(
      this,
    );
    this.featurestoreEntityVersions = new FeaturestoreEntityVersionsImpl(this);
    this.inferencePools = new InferencePoolsImpl(this);
    this.inferenceEndpoints = new InferenceEndpointsImpl(this);
    this.inferenceGroups = new InferenceGroupsImpl(this);
    this.jobs = new JobsImpl(this);
    this.labelingJobs = new LabelingJobsImpl(this);
    this.modelContainers = new ModelContainersImpl(this);
    this.modelVersions = new ModelVersionsImpl(this);
    this.onlineEndpoints = new OnlineEndpointsImpl(this);
    this.onlineDeployments = new OnlineDeploymentsImpl(this);
    this.schedules = new SchedulesImpl(this);
    this.serverlessEndpoints = new ServerlessEndpointsImpl(this);
    this.registries = new RegistriesImpl(this);
    this.workspaceFeatures = new WorkspaceFeaturesImpl(this);
    this.operations = new OperationsImpl(this);
    this.workspaces = new WorkspacesImpl(this);
    this.workspaceConnections = new WorkspaceConnectionsImpl(this);
    this.connection = new ConnectionImpl(this);
    this.connectionRaiBlocklists = new ConnectionRaiBlocklistsImpl(this);
    this.connectionRaiBlocklist = new ConnectionRaiBlocklistImpl(this);
    this.connectionRaiBlocklistItem = new ConnectionRaiBlocklistItemImpl(this);
    this.connectionRaiBlocklistItems = new ConnectionRaiBlocklistItemsImpl(
      this,
    );
    this.connectionRaiPolicies = new ConnectionRaiPoliciesImpl(this);
    this.connectionRaiPolicy = new ConnectionRaiPolicyImpl(this);
    this.endpointDeployment = new EndpointDeploymentImpl(this);
    this.endpointOperations = new EndpointOperationsImpl(this);
    this.raiPolicies = new RaiPoliciesImpl(this);
    this.raiPolicy = new RaiPolicyImpl(this);
    this.managedNetworkSettingsRule = new ManagedNetworkSettingsRuleImpl(this);
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.privateLinkResources = new PrivateLinkResourcesImpl(this);
    this.managedNetworkProvisions = new ManagedNetworkProvisionsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  usages: Usages;
  virtualMachineSizes: VirtualMachineSizes;
  quotas: Quotas;
  computeOperations: ComputeOperations;
  capacityReservationGroups: CapacityReservationGroups;
  registryCodeContainers: RegistryCodeContainers;
  registryCodeVersions: RegistryCodeVersions;
  registryComponentContainers: RegistryComponentContainers;
  registryComponentVersions: RegistryComponentVersions;
  registryDataContainers: RegistryDataContainers;
  registryDataVersions: RegistryDataVersions;
  registryDataReferences: RegistryDataReferences;
  registryEnvironmentContainers: RegistryEnvironmentContainers;
  registryEnvironmentVersions: RegistryEnvironmentVersions;
  marketplaceSubscriptions: MarketplaceSubscriptions;
  registryModelContainers: RegistryModelContainers;
  registryModelVersions: RegistryModelVersions;
  batchEndpoints: BatchEndpoints;
  batchDeployments: BatchDeployments;
  codeContainers: CodeContainers;
  codeVersions: CodeVersions;
  componentContainers: ComponentContainers;
  componentVersions: ComponentVersions;
  dataContainers: DataContainers;
  dataVersions: DataVersions;
  datastores: Datastores;
  environmentContainers: EnvironmentContainers;
  environmentVersions: EnvironmentVersions;
  featuresetContainers: FeaturesetContainers;
  features: Features;
  featuresetVersions: FeaturesetVersions;
  featurestoreEntityContainers: FeaturestoreEntityContainers;
  featurestoreEntityVersions: FeaturestoreEntityVersions;
  inferencePools: InferencePools;
  inferenceEndpoints: InferenceEndpoints;
  inferenceGroups: InferenceGroups;
  jobs: Jobs;
  labelingJobs: LabelingJobs;
  modelContainers: ModelContainers;
  modelVersions: ModelVersions;
  onlineEndpoints: OnlineEndpoints;
  onlineDeployments: OnlineDeployments;
  schedules: Schedules;
  serverlessEndpoints: ServerlessEndpoints;
  registries: Registries;
  workspaceFeatures: WorkspaceFeatures;
  operations: Operations;
  workspaces: Workspaces;
  workspaceConnections: WorkspaceConnections;
  connection: Connection;
  connectionRaiBlocklists: ConnectionRaiBlocklists;
  connectionRaiBlocklist: ConnectionRaiBlocklist;
  connectionRaiBlocklistItem: ConnectionRaiBlocklistItem;
  connectionRaiBlocklistItems: ConnectionRaiBlocklistItems;
  connectionRaiPolicies: ConnectionRaiPolicies;
  connectionRaiPolicy: ConnectionRaiPolicy;
  endpointDeployment: EndpointDeployment;
  endpointOperations: EndpointOperations;
  raiPolicies: RaiPolicies;
  raiPolicy: RaiPolicy;
  managedNetworkSettingsRule: ManagedNetworkSettingsRule;
  privateEndpointConnections: PrivateEndpointConnections;
  privateLinkResources: PrivateLinkResources;
  managedNetworkProvisions: ManagedNetworkProvisions;
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SapLandscapeMonitor } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WorkloadsClient } from "../workloadsClient";
import {
  SapLandscapeMonitorResource,
  SapLandscapeMonitorListByMonitorNextOptionalParams,
  SapLandscapeMonitorListByMonitorOptionalParams,
  SapLandscapeMonitorListByMonitorResponse,
  SapLandscapeMonitorGetOptionalParams,
  SapLandscapeMonitorGetResponse,
  SapLandscapeMonitorCreateOptionalParams,
  SapLandscapeMonitorCreateResponse,
  SapLandscapeMonitorUpdateOptionalParams,
  SapLandscapeMonitorUpdateResponse,
  SapLandscapeMonitorDeleteOptionalParams,
  SapLandscapeMonitorListByMonitorNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SapLandscapeMonitor operations. */
export class SapLandscapeMonitorImpl implements SapLandscapeMonitor {
  private readonly client: WorkloadsClient;

  /**
   * Initialize a new instance of the class SapLandscapeMonitor class.
   * @param client Reference to the service client
   */
  constructor(client: WorkloadsClient) {
    this.client = client;
  }

  /**
   * Gets configuration values for Single Pane Of Glass for SAP monitor for the specified subscription,
   * resource group, and resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the SAP monitor resource.
   * @param options The options parameters.
   */
  public listByMonitor(
    resourceGroupName: string,
    monitorName: string,
    options?: SapLandscapeMonitorListByMonitorOptionalParams,
  ): PagedAsyncIterableIterator<SapLandscapeMonitorResource> {
    const iter = this.listByMonitorPagingAll(
      resourceGroupName,
      monitorName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByMonitorPagingPage(
          resourceGroupName,
          monitorName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByMonitorPagingPage(
    resourceGroupName: string,
    monitorName: string,
    options?: SapLandscapeMonitorListByMonitorOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SapLandscapeMonitorResource[]> {
    let result: SapLandscapeMonitorListByMonitorResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByMonitor(
        resourceGroupName,
        monitorName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByMonitorNext(
        resourceGroupName,
        monitorName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByMonitorPagingAll(
    resourceGroupName: string,
    monitorName: string,
    options?: SapLandscapeMonitorListByMonitorOptionalParams,
  ): AsyncIterableIterator<SapLandscapeMonitorResource> {
    for await (const page of this.listByMonitorPagingPage(
      resourceGroupName,
      monitorName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets configuration values for Single Pane Of Glass for SAP monitor for the specified subscription,
   * resource group, and resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the SAP monitor resource.
   * @param options The options parameters.
   */
  private _listByMonitor(
    resourceGroupName: string,
    monitorName: string,
    options?: SapLandscapeMonitorListByMonitorOptionalParams,
  ): Promise<SapLandscapeMonitorListByMonitorResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      listByMonitorOperationSpec,
    );
  }

  /**
   * Gets configuration values for Single Pane Of Glass for SAP monitor for the specified subscription,
   * resource group, and resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the SAP monitor resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    options?: SapLandscapeMonitorGetOptionalParams,
  ): Promise<SapLandscapeMonitorGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates a SAP Landscape Monitor Dashboard for the specified subscription, resource group, and
   * resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the SAP monitor resource.
   * @param resource Request body representing a configuration for Sap Landscape Monitor Dashboard
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    monitorName: string,
    resource: SapLandscapeMonitorResource,
    options?: SapLandscapeMonitorCreateOptionalParams,
  ): Promise<SapLandscapeMonitorCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, resource, options },
      createOperationSpec,
    );
  }

  /**
   * Patches the SAP Landscape Monitor Dashboard for the specified subscription, resource group, and SAP
   * monitor name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the SAP monitor resource.
   * @param properties Request body representing a configuration for Sap Landscape Monitor Dashboard
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    monitorName: string,
    properties: SapLandscapeMonitorResource,
    options?: SapLandscapeMonitorUpdateOptionalParams,
  ): Promise<SapLandscapeMonitorUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, properties, options },
      updateOperationSpec,
    );
  }

  /**
   * Deletes a SAP Landscape Monitor Dashboard with the specified subscription, resource group, and SAP
   * monitor name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the SAP monitor resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    monitorName: string,
    options?: SapLandscapeMonitorDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListByMonitorNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the SAP monitor resource.
   * @param nextLink The nextLink from the previous successful call to the ListByMonitor method.
   * @param options The options parameters.
   */
  private _listByMonitorNext(
    resourceGroupName: string,
    monitorName: string,
    nextLink: string,
    options?: SapLandscapeMonitorListByMonitorNextOptionalParams,
  ): Promise<SapLandscapeMonitorListByMonitorNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, nextLink, options },
      listByMonitorNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByMonitorOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SapLandscapeMonitorResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SapLandscapeMonitorResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SapLandscapeMonitorResource,
    },
    201: {
      bodyMapper: Mappers.SapLandscapeMonitorResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SapLandscapeMonitorResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByMonitorNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SapLandscapeMonitorResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};

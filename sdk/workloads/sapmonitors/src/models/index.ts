/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ProviderSpecificPropertiesUnion =
  | ProviderSpecificProperties
  | Db2ProviderInstanceProperties
  | HanaDbProviderInstanceProperties
  | MsSqlServerProviderInstanceProperties
  | PrometheusHaClusterProviderInstanceProperties
  | PrometheusOsProviderInstanceProperties
  | SapNetWeaverProviderInstanceProperties;

/** The response of a Monitor list operation. */
export interface MonitorListResult {
  /** The Monitor items on this page */
  value: Monitor[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Managed resource group configuration */
export interface ManagedResourceGroupConfiguration {
  /** Managed resource group name */
  name?: string;
}

/** Configuration details of app service plan */
export interface AppServicePlanConfiguration {
  /** The App Service plan tier. */
  tier?: AppServicePlanTier;
  /** The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number. */
  capacity?: number;
}

/** The Managed service identity. */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of managed service identity. */
  type: ManagedServiceIdentityType;
  /** The user assigned identities. */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedIdentity | null;
  };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** Defines the request body for updating SAP monitor resource. */
export interface UpdateMonitorRequest {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The Managed service identity. */
  identity?: ManagedServiceIdentity;
}

/** The response of a ProviderInstance list operation. */
export interface ProviderInstanceListResult {
  /** The ProviderInstance items on this page */
  value: ProviderInstance[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Resource health details */
export interface Health {
  /**
   * Health state of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthState?: WorkloadProviderInstanceHealthState;
  /**
   * Reasons impacting health state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly impactingReasons?: string;
}

/** Gets or sets the provider specific properties. */
export interface ProviderSpecificProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  providerType:
    | "Db2"
    | "SapHana"
    | "MsSqlServer"
    | "PrometheusHaCluster"
    | "PrometheusOS"
    | "SapNetWeaver";
}

/** The response of a SapLandscapeMonitorResource list operation. */
export interface SapLandscapeMonitorResourceListResult {
  /** The SapLandscapeMonitorResource items on this page */
  value: SapLandscapeMonitorResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Gets or sets the SID groupings by landscape and Environment. */
export interface SapLandscapeMonitorPropertiesGrouping {
  /** Gets or sets the list of landscape to SID mappings. */
  landscape?: SapLandscapeMonitorSidMapping[];
  /** Gets or sets the list of Sap Applications to SID mappings. */
  sapApplication?: SapLandscapeMonitorSidMapping[];
}

/** Gets or sets the mapping for SID to Environment/Applications. */
export interface SapLandscapeMonitorSidMapping {
  /** Gets or sets the name of the grouping. */
  name?: string;
  /** Gets or sets the list of SID's. */
  topSid?: string[];
}

/** Gets or sets the Threshold Values for Top Metrics Health. */
export interface SapLandscapeMonitorMetricThresholds {
  /** Gets or sets the name of the threshold. */
  name?: string;
  /** Gets or sets the threshold value for Green. */
  green?: number;
  /** Gets or sets the threshold value for Yellow. */
  yellow?: number;
  /** Gets or sets the threshold value for Red. */
  red?: number;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Gets or sets the DB2 provider properties. */
export interface Db2ProviderInstanceProperties
  extends ProviderSpecificProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  providerType: "Db2";
  /** Gets or sets the target virtual machine name. */
  hostname?: string;
  /** Gets or sets the db2 database name. */
  dbName?: string;
  /** Gets or sets the db2 database sql port. */
  dbPort?: string;
  /** Gets or sets the db2 database user name. */
  dbUsername?: string;
  /**
   * Gets or sets the db2 database password.
   * This value contains a credential. Consider obscuring before showing to users
   */
  dbPassword?: string;
  /** Gets or sets the key vault URI to secret with the database password. */
  dbPasswordUri?: string;
  /** Gets or sets the SAP System Identifier */
  sapSid?: string;
  /** Gets or sets certificate preference if secure communication is enabled. */
  sslPreference?: SslPreference;
  /** Gets or sets the blob URI to SSL certificate for the DB2 Database. */
  sslCertificateUri?: string;
}

/** Gets or sets the provider properties. */
export interface HanaDbProviderInstanceProperties
  extends ProviderSpecificProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  providerType: "SapHana";
  /** Gets or sets the target virtual machine size. */
  hostname?: string;
  /** Gets or sets the hana database name. */
  dbName?: string;
  /** Gets or sets the database sql port. */
  sqlPort?: string;
  /** Gets or sets the database instance number. */
  instanceNumber?: string;
  /** Gets or sets the database user name. */
  dbUsername?: string;
  /**
   * Gets or sets the database password.
   * This value contains a credential. Consider obscuring before showing to users
   */
  dbPassword?: string;
  /** Gets or sets the key vault URI to secret with the database password. */
  dbPasswordUri?: string;
  /** Gets or sets the blob URI to SSL certificate for the DB. */
  sslCertificateUri?: string;
  /** Gets or sets the hostname(s) in the SSL certificate. */
  sslHostNameInCertificate?: string;
  /** Gets or sets certificate preference if secure communication is enabled. */
  sslPreference?: SslPreference;
  /** Gets or sets the SAP System Identifier. */
  sapSid?: string;
}

/** Gets or sets the SQL server provider properties. */
export interface MsSqlServerProviderInstanceProperties
  extends ProviderSpecificProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  providerType: "MsSqlServer";
  /** Gets or sets the SQL server host name. */
  hostname?: string;
  /** Gets or sets the database sql port. */
  dbPort?: string;
  /** Gets or sets the database user name. */
  dbUsername?: string;
  /**
   * Gets or sets the database password.
   * This value contains a credential. Consider obscuring before showing to users
   */
  dbPassword?: string;
  /** Gets or sets the key vault URI to secret with the database password. */
  dbPasswordUri?: string;
  /** Gets or sets the SAP System Identifier */
  sapSid?: string;
  /** Gets or sets certificate preference if secure communication is enabled. */
  sslPreference?: SslPreference;
  /** Gets or sets the blob URI to SSL certificate for the SQL Database. */
  sslCertificateUri?: string;
}

/** Gets or sets the PrometheusHaCluster provider properties. */
export interface PrometheusHaClusterProviderInstanceProperties
  extends ProviderSpecificProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  providerType: "PrometheusHaCluster";
  /** URL of the Node Exporter endpoint. */
  prometheusUrl?: string;
  /** Gets or sets the target machine name. */
  hostname?: string;
  /** Gets or sets the cluster sid. */
  sid?: string;
  /** Gets or sets the clusterName. */
  clusterName?: string;
  /** Gets or sets certificate preference if secure communication is enabled. */
  sslPreference?: SslPreference;
  /** Gets or sets the blob URI to SSL certificate for the HA cluster exporter. */
  sslCertificateUri?: string;
}

/** Gets or sets the PrometheusOS provider properties. */
export interface PrometheusOsProviderInstanceProperties
  extends ProviderSpecificProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  providerType: "PrometheusOS";
  /** URL of the Node Exporter endpoint */
  prometheusUrl?: string;
  /** Gets or sets certificate preference if secure communication is enabled. */
  sslPreference?: SslPreference;
  /** Gets or sets the blob URI to SSL certificate for the prometheus node exporter. */
  sslCertificateUri?: string;
  /** Gets or sets the SAP System Identifier */
  sapSid?: string;
}

/** Gets or sets the provider properties. */
export interface SapNetWeaverProviderInstanceProperties
  extends ProviderSpecificProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  providerType: "SapNetWeaver";
  /** Gets or sets the SAP System Identifier */
  sapSid?: string;
  /** Gets or sets the target virtual machine IP Address/FQDN. */
  sapHostname?: string;
  /** Gets or sets the instance number of SAP NetWeaver. */
  sapInstanceNr?: string;
  /** Gets or sets the list of HostFile Entries */
  sapHostFileEntries?: string[];
  /** Gets or sets the SAP user name. */
  sapUsername?: string;
  /**
   * Sets the SAP password.
   * This value contains a credential. Consider obscuring before showing to users
   */
  sapPassword?: string;
  /** Gets or sets the key vault URI to secret with the SAP password. */
  sapPasswordUri?: string;
  /** Gets or sets the SAP Client ID. */
  sapClientId?: string;
  /** Gets or sets the SAP HTTP port number. */
  sapPortNumber?: string;
  /** Gets or sets the blob URI to SSL certificate for the SAP system. */
  sslCertificateUri?: string;
  /** Gets or sets certificate preference if secure communication is enabled. */
  sslPreference?: SslPreference;
}

/** SAP monitor info on Azure (ARM properties and SAP monitor properties) */
export interface Monitor extends TrackedResource {
  /** The managed service identities assigned to this resource. */
  identity?: ManagedServiceIdentity;
  /**
   * State of provisioning of the SAP monitor.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkloadMonitorProvisioningState;
  /**
   * Defines the SAP monitor errors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: ErrorDetail;
  /** The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region. */
  appLocation?: string;
  /** Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET. */
  routingPreference?: RoutingPreference;
  /** Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created which do not support zone redundancy. */
  zoneRedundancyPreference?: string;
  /** Managed resource group configuration */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /** The ARM ID of the Log Analytics Workspace that is used for SAP monitoring. */
  logAnalyticsWorkspaceArmId?: string;
  /** The subnet which the SAP monitor will be deployed in */
  monitorSubnet?: string;
  /** App service plan configuration */
  appServicePlanConfiguration?: AppServicePlanConfiguration;
  /**
   * The ARM ID of the MSI used for SAP monitoring.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly msiArmId?: string;
  /**
   * The ARM ID of the Storage account used for SAP monitoring.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageAccountArmId?: string;
}

/** A provider instance associated with SAP monitor. */
export interface ProviderInstance extends ProxyResource {
  /**
   * State of provisioning of the provider instance
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: WorkloadMonitorProvisioningState;
  /**
   * Resource health details
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly health?: Health;
  /**
   * Defines the provider instance errors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: ErrorDetail;
  /** Defines the provider specific properties. */
  providerSettings?: ProviderSpecificPropertiesUnion;
}

/** configuration associated with SAP Landscape Monitor Dashboard. */
export interface SapLandscapeMonitorResource extends ProxyResource {
  /**
   * State of provisioning of the SAP monitor.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: SapLandscapeMonitorProvisioningState;
  /** Gets or sets the SID groupings by landscape and Environment. */
  grouping?: SapLandscapeMonitorPropertiesGrouping;
  /** Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard */
  topMetricsThresholds?: SapLandscapeMonitorMetricThresholds[];
}

/** Defines headers for Monitors_create operation. */
export interface MonitorsCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Monitors_update operation. */
export interface MonitorsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Monitors_delete operation. */
export interface MonitorsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ProviderInstances_create operation. */
export interface ProviderInstancesCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for ProviderInstances_delete operation. */
export interface ProviderInstancesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link WorkloadMonitorProvisioningState} that the service accepts. */
export enum KnownWorkloadMonitorProvisioningState {
  /** The resource request has been accepted. */
  Accepted = "Accepted",
  /** The resource is being created. */
  Creating = "Creating",
  /** The resource is being updated. */
  Updating = "Updating",
  /** The resource creation failed. */
  Failed = "Failed",
  /** The resource creation has succeeded. */
  Succeeded = "Succeeded",
  /** The resource is being deleted. */
  Deleting = "Deleting",
  /** The resource is being migrated. */
  Migrating = "Migrating",
  /** The resource operation was canceled. */
  Canceled = "Canceled",
}

/**
 * Defines values for WorkloadMonitorProvisioningState. \
 * {@link KnownWorkloadMonitorProvisioningState} can be used interchangeably with WorkloadMonitorProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted**: The resource request has been accepted. \
 * **Creating**: The resource is being created. \
 * **Updating**: The resource is being updated. \
 * **Failed**: The resource creation failed. \
 * **Succeeded**: The resource creation has succeeded. \
 * **Deleting**: The resource is being deleted. \
 * **Migrating**: The resource is being migrated. \
 * **Canceled**: The resource operation was canceled.
 */
export type WorkloadMonitorProvisioningState = string;

/** Known values of {@link RoutingPreference} that the service accepts. */
export enum KnownRoutingPreference {
  /** Default routing preference. Only RFC1918 traffic is routed to the customer VNET. */
  Default = "Default",
  /** Route all traffic to the customer VNET. */
  RouteAll = "RouteAll",
}

/**
 * Defines values for RoutingPreference. \
 * {@link KnownRoutingPreference} can be used interchangeably with RoutingPreference,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: Default routing preference. Only RFC1918 traffic is routed to the customer VNET. \
 * **RouteAll**: Route all traffic to the customer VNET.
 */
export type RoutingPreference = string;

/** Known values of {@link AppServicePlanTier} that the service accepts. */
export enum KnownAppServicePlanTier {
  /** Elastic Premium plan */
  ElasticPremium = "ElasticPremium",
  /** Dedicated Premium V3 plan */
  PremiumV3 = "PremiumV3",
}

/**
 * Defines values for AppServicePlanTier. \
 * {@link KnownAppServicePlanTier} can be used interchangeably with AppServicePlanTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ElasticPremium**: Elastic Premium plan \
 * **PremiumV3**: Dedicated Premium V3 plan
 */
export type AppServicePlanTier = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** No managed identity. */
  None = "None",
  /** The user assigned managed identity. */
  UserAssigned = "UserAssigned",
  /** The system assigned managed identity. */
  SystemAssigned = "SystemAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No managed identity. \
 * **UserAssigned**: The user assigned managed identity. \
 * **SystemAssigned**: The system assigned managed identity.
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link WorkloadProviderInstanceHealthState} that the service accepts. */
export enum KnownWorkloadProviderInstanceHealthState {
  /** The resource health status is Healthy */
  Healthy = "Healthy",
  /** The resource health status is Degraded */
  Degraded = "Degraded",
  /** The resource health status is Unavailable */
  Unavailable = "Unavailable",
  /** The resource health status is Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for WorkloadProviderInstanceHealthState. \
 * {@link KnownWorkloadProviderInstanceHealthState} can be used interchangeably with WorkloadProviderInstanceHealthState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Healthy**: The resource health status is Healthy \
 * **Degraded**: The resource health status is Degraded \
 * **Unavailable**: The resource health status is Unavailable \
 * **Unknown**: The resource health status is Unknown
 */
export type WorkloadProviderInstanceHealthState = string;

/** Known values of {@link SapLandscapeMonitorProvisioningState} that the service accepts. */
export enum KnownSapLandscapeMonitorProvisioningState {
  /** The resource request has been accepted. */
  Accepted = "Accepted",
  /** The resource has been created. */
  Created = "Created",
  /** The resource operation has failed. */
  Failed = "Failed",
  /** The resource operation has succeeded. */
  Succeeded = "Succeeded",
  /** The resource operation was canceled. */
  Canceled = "Canceled",
}

/**
 * Defines values for SapLandscapeMonitorProvisioningState. \
 * {@link KnownSapLandscapeMonitorProvisioningState} can be used interchangeably with SapLandscapeMonitorProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted**: The resource request has been accepted. \
 * **Created**: The resource has been created. \
 * **Failed**: The resource operation has failed. \
 * **Succeeded**: The resource operation has succeeded. \
 * **Canceled**: The resource operation was canceled.
 */
export type SapLandscapeMonitorProvisioningState = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link SslPreference} that the service accepts. */
export enum KnownSslPreference {
  /** Secure communication is disabled. */
  Disabled = "Disabled",
  /** Secure communication is enabled with root certificate. */
  RootCertificate = "RootCertificate",
  /** Secure communication is enabled with server certificate. */
  ServerCertificate = "ServerCertificate",
}

/**
 * Defines values for SslPreference. \
 * {@link KnownSslPreference} can be used interchangeably with SslPreference,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: Secure communication is disabled. \
 * **RootCertificate**: Secure communication is enabled with root certificate. \
 * **ServerCertificate**: Secure communication is enabled with server certificate.
 */
export type SslPreference = string;

/** Known values of {@link Versions} that the service accepts. */
export enum KnownVersions {
  /** The 2023-12-01-preview API version. */
  V20231201Preview = "2023-12-01-preview",
  /** The 2023-10-01-preview API version. */
  V20231001Preview = "2023-10-01-preview",
}

/**
 * Defines values for Versions. \
 * {@link KnownVersions} can be used interchangeably with Versions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **2023-12-01-preview**: The 2023-12-01-preview API version. \
 * **2023-10-01-preview**: The 2023-10-01-preview API version.
 */
export type Versions = string;

/** Optional parameters. */
export interface MonitorsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type MonitorsListResponse = MonitorListResult;

/** Optional parameters. */
export interface MonitorsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MonitorsListByResourceGroupResponse = MonitorListResult;

/** Optional parameters. */
export interface MonitorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MonitorsGetResponse = Monitor;

/** Optional parameters. */
export interface MonitorsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type MonitorsCreateResponse = Monitor;

/** Optional parameters. */
export interface MonitorsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type MonitorsUpdateResponse = Monitor;

/** Optional parameters. */
export interface MonitorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type MonitorsDeleteResponse = MonitorsDeleteHeaders;

/** Optional parameters. */
export interface MonitorsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MonitorsListNextResponse = MonitorListResult;

/** Optional parameters. */
export interface MonitorsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MonitorsListByResourceGroupNextResponse = MonitorListResult;

/** Optional parameters. */
export interface ProviderInstancesListByMonitorOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMonitor operation. */
export type ProviderInstancesListByMonitorResponse = ProviderInstanceListResult;

/** Optional parameters. */
export interface ProviderInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProviderInstancesGetResponse = ProviderInstance;

/** Optional parameters. */
export interface ProviderInstancesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ProviderInstancesCreateResponse = ProviderInstance;

/** Optional parameters. */
export interface ProviderInstancesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type ProviderInstancesDeleteResponse = ProviderInstancesDeleteHeaders;

/** Optional parameters. */
export interface ProviderInstancesListByMonitorNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMonitorNext operation. */
export type ProviderInstancesListByMonitorNextResponse =
  ProviderInstanceListResult;

/** Optional parameters. */
export interface SapLandscapeMonitorListByMonitorOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMonitor operation. */
export type SapLandscapeMonitorListByMonitorResponse =
  SapLandscapeMonitorResourceListResult;

/** Optional parameters. */
export interface SapLandscapeMonitorGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SapLandscapeMonitorGetResponse = SapLandscapeMonitorResource;

/** Optional parameters. */
export interface SapLandscapeMonitorCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type SapLandscapeMonitorCreateResponse = SapLandscapeMonitorResource;

/** Optional parameters. */
export interface SapLandscapeMonitorUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SapLandscapeMonitorUpdateResponse = SapLandscapeMonitorResource;

/** Optional parameters. */
export interface SapLandscapeMonitorDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SapLandscapeMonitorListByMonitorNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMonitorNext operation. */
export type SapLandscapeMonitorListByMonitorNextResponse =
  SapLandscapeMonitorResourceListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface WorkloadsClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}

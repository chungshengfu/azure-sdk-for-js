/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DataCollectionEndpoints } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  NetworkSecurityPerimeterConfiguration,
  DataCollectionEndpointsListNSPNextOptionalParams,
  DataCollectionEndpointsListNSPOptionalParams,
  DataCollectionEndpointsListNSPResponse,
  DataCollectionEndpointResource,
  DataCollectionEndpointsListByResourceGroupNextOptionalParams,
  DataCollectionEndpointsListByResourceGroupOptionalParams,
  DataCollectionEndpointsListByResourceGroupResponse,
  DataCollectionEndpointsListBySubscriptionNextOptionalParams,
  DataCollectionEndpointsListBySubscriptionOptionalParams,
  DataCollectionEndpointsListBySubscriptionResponse,
  DataCollectionEndpointsGetNSPOptionalParams,
  DataCollectionEndpointsGetNSPResponse,
  DataCollectionEndpointsReconcileNSPOptionalParams,
  DataCollectionEndpointsReconcileNSPResponse,
  DataCollectionEndpointsGetOptionalParams,
  DataCollectionEndpointsGetResponse,
  DataCollectionEndpointsCreateOptionalParams,
  DataCollectionEndpointsCreateResponse,
  DataCollectionEndpointsUpdateOptionalParams,
  DataCollectionEndpointsUpdateResponse,
  DataCollectionEndpointsDeleteOptionalParams,
  DataCollectionEndpointsListNSPNextResponse,
  DataCollectionEndpointsListByResourceGroupNextResponse,
  DataCollectionEndpointsListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DataCollectionEndpoints operations. */
export class DataCollectionEndpointsImpl implements DataCollectionEndpoints {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class DataCollectionEndpoints class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * Gets a list of NSP configurations for the specified data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param options The options parameters.
   */
  public listNSP(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsListNSPOptionalParams,
  ): PagedAsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {
    const iter = this.listNSPPagingAll(
      resourceGroupName,
      dataCollectionEndpointName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listNSPPagingPage(
          resourceGroupName,
          dataCollectionEndpointName,
          options,
          settings,
        );
      },
    };
  }

  private async *listNSPPagingPage(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsListNSPOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration[]> {
    let result: DataCollectionEndpointsListNSPResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listNSP(
        resourceGroupName,
        dataCollectionEndpointName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNSPNext(
        resourceGroupName,
        dataCollectionEndpointName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listNSPPagingAll(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsListNSPOptionalParams,
  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {
    for await (const page of this.listNSPPagingPage(
      resourceGroupName,
      dataCollectionEndpointName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all data collection endpoints in the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: DataCollectionEndpointsListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<DataCollectionEndpointResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: DataCollectionEndpointsListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DataCollectionEndpointResource[]> {
    let result: DataCollectionEndpointsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: DataCollectionEndpointsListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<DataCollectionEndpointResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all data collection endpoints in the specified subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: DataCollectionEndpointsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<DataCollectionEndpointResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: DataCollectionEndpointsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DataCollectionEndpointResource[]> {
    let result: DataCollectionEndpointsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: DataCollectionEndpointsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<DataCollectionEndpointResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of NSP configurations for the specified data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param options The options parameters.
   */
  private _listNSP(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsListNSPOptionalParams,
  ): Promise<DataCollectionEndpointsListNSPResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataCollectionEndpointName, options },
      listNSPOperationSpec,
    );
  }

  /**
   * Gets the specified NSP configuration for the specified data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param configurationName The name for Network Security Perimeter configuration
   * @param options The options parameters.
   */
  getNSP(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    configurationName: string,
    options?: DataCollectionEndpointsGetNSPOptionalParams,
  ): Promise<DataCollectionEndpointsGetNSPResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataCollectionEndpointName,
        configurationName,
        options,
      },
      getNSPOperationSpec,
    );
  }

  /**
   * Reconciles the specified NSP configuration for the specified data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param configurationName The name for Network Security Perimeter configuration
   * @param options The options parameters.
   */
  async beginReconcileNSP(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    configurationName: string,
    options?: DataCollectionEndpointsReconcileNSPOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DataCollectionEndpointsReconcileNSPResponse>,
      DataCollectionEndpointsReconcileNSPResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DataCollectionEndpointsReconcileNSPResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        dataCollectionEndpointName,
        configurationName,
        options,
      },
      spec: reconcileNSPOperationSpec,
    });
    const poller = await createHttpPoller<
      DataCollectionEndpointsReconcileNSPResponse,
      OperationState<DataCollectionEndpointsReconcileNSPResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Reconciles the specified NSP configuration for the specified data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param configurationName The name for Network Security Perimeter configuration
   * @param options The options parameters.
   */
  async beginReconcileNSPAndWait(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    configurationName: string,
    options?: DataCollectionEndpointsReconcileNSPOptionalParams,
  ): Promise<DataCollectionEndpointsReconcileNSPResponse> {
    const poller = await this.beginReconcileNSP(
      resourceGroupName,
      dataCollectionEndpointName,
      configurationName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists all data collection endpoints in the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: DataCollectionEndpointsListByResourceGroupOptionalParams,
  ): Promise<DataCollectionEndpointsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Lists all data collection endpoints in the specified subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: DataCollectionEndpointsListBySubscriptionOptionalParams,
  ): Promise<DataCollectionEndpointsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Returns the specified data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsGetOptionalParams,
  ): Promise<DataCollectionEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataCollectionEndpointName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsCreateOptionalParams,
  ): Promise<DataCollectionEndpointsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataCollectionEndpointName, options },
      createOperationSpec,
    );
  }

  /**
   * Updates part of a data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsUpdateOptionalParams,
  ): Promise<DataCollectionEndpointsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataCollectionEndpointName, options },
      updateOperationSpec,
    );
  }

  /**
   * Deletes a data collection endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    options?: DataCollectionEndpointsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataCollectionEndpointName, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListNSPNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dataCollectionEndpointName The name of the data collection endpoint. The name is case
   *                                   insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListNSP method.
   * @param options The options parameters.
   */
  private _listNSPNext(
    resourceGroupName: string,
    dataCollectionEndpointName: string,
    nextLink: string,
    options?: DataCollectionEndpointsListNSPNextOptionalParams,
  ): Promise<DataCollectionEndpointsListNSPNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataCollectionEndpointName, nextLink, options },
      listNSPNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DataCollectionEndpointsListByResourceGroupNextOptionalParams,
  ): Promise<DataCollectionEndpointsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: DataCollectionEndpointsListBySubscriptionNextOptionalParams,
  ): Promise<DataCollectionEndpointsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listNSPOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}/networkSecurityPerimeterConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dataCollectionEndpointName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getNSPOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}/networkSecurityPerimeterConfigurations/{configurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfiguration,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.configurationName,
    Parameters.dataCollectionEndpointName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const reconcileNSPOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}/networkSecurityPerimeterConfigurations/{configurationName}/reconcile",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DataCollectionEndpointsReconcileNSPHeaders,
    },
    201: {
      headersMapper: Mappers.DataCollectionEndpointsReconcileNSPHeaders,
    },
    202: {
      headersMapper: Mappers.DataCollectionEndpointsReconcileNSPHeaders,
    },
    204: {
      headersMapper: Mappers.DataCollectionEndpointsReconcileNSPHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.configurationName,
    Parameters.dataCollectionEndpointName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataCollectionEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataCollectionEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataCollectionEndpointResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dataCollectionEndpointName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataCollectionEndpointResource,
    },
    201: {
      bodyMapper: Mappers.DataCollectionEndpointResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dataCollectionEndpointName1,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DataCollectionEndpointResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dataCollectionEndpointName1,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.dataCollectionEndpointName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNSPNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.dataCollectionEndpointName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataCollectionEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataCollectionEndpointResourceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseCommonV2,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};

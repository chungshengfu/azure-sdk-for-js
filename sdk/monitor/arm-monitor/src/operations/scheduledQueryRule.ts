/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ScheduledQueryRule } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  NetworkSecurityPerimeterConfiguration,
  ScheduledQueryRuleListNSPNextOptionalParams,
  ScheduledQueryRuleListNSPOptionalParams,
  ScheduledQueryRuleListNSPResponse,
  ScheduledQueryRuleGetNSPOptionalParams,
  ScheduledQueryRuleGetNSPResponse,
  ScheduledQueryRuleReconcileNSPOptionalParams,
  ScheduledQueryRuleReconcileNSPResponse,
  ScheduledQueryRuleListNSPNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ScheduledQueryRule operations. */
export class ScheduledQueryRuleImpl implements ScheduledQueryRule {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class ScheduledQueryRule class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * Gets a list of NSP configurations for specified scheduled query rule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param options The options parameters.
   */
  public listNSP(
    resourceGroupName: string,
    ruleName: string,
    options?: ScheduledQueryRuleListNSPOptionalParams,
  ): PagedAsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {
    const iter = this.listNSPPagingAll(resourceGroupName, ruleName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listNSPPagingPage(
          resourceGroupName,
          ruleName,
          options,
          settings,
        );
      },
    };
  }

  private async *listNSPPagingPage(
    resourceGroupName: string,
    ruleName: string,
    options?: ScheduledQueryRuleListNSPOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration[]> {
    let result: ScheduledQueryRuleListNSPResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listNSP(resourceGroupName, ruleName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNSPNext(
        resourceGroupName,
        ruleName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listNSPPagingAll(
    resourceGroupName: string,
    ruleName: string,
    options?: ScheduledQueryRuleListNSPOptionalParams,
  ): AsyncIterableIterator<NetworkSecurityPerimeterConfiguration> {
    for await (const page of this.listNSPPagingPage(
      resourceGroupName,
      ruleName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of NSP configurations for specified scheduled query rule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param options The options parameters.
   */
  private _listNSP(
    resourceGroupName: string,
    ruleName: string,
    options?: ScheduledQueryRuleListNSPOptionalParams,
  ): Promise<ScheduledQueryRuleListNSPResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, options },
      listNSPOperationSpec,
    );
  }

  /**
   * Gets a network security perimeter configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param configurationName The name for Network Security Perimeter configuration
   * @param options The options parameters.
   */
  getNSP(
    resourceGroupName: string,
    ruleName: string,
    configurationName: string,
    options?: ScheduledQueryRuleGetNSPOptionalParams,
  ): Promise<ScheduledQueryRuleGetNSPResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, configurationName, options },
      getNSPOperationSpec,
    );
  }

  /**
   * Reconcile network security perimeter configuration for ScheduledQueryRule resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param configurationName The name for Network Security Perimeter configuration
   * @param options The options parameters.
   */
  async beginReconcileNSP(
    resourceGroupName: string,
    ruleName: string,
    configurationName: string,
    options?: ScheduledQueryRuleReconcileNSPOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ScheduledQueryRuleReconcileNSPResponse>,
      ScheduledQueryRuleReconcileNSPResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ScheduledQueryRuleReconcileNSPResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, ruleName, configurationName, options },
      spec: reconcileNSPOperationSpec,
    });
    const poller = await createHttpPoller<
      ScheduledQueryRuleReconcileNSPResponse,
      OperationState<ScheduledQueryRuleReconcileNSPResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Reconcile network security perimeter configuration for ScheduledQueryRule resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param configurationName The name for Network Security Perimeter configuration
   * @param options The options parameters.
   */
  async beginReconcileNSPAndWait(
    resourceGroupName: string,
    ruleName: string,
    configurationName: string,
    options?: ScheduledQueryRuleReconcileNSPOptionalParams,
  ): Promise<ScheduledQueryRuleReconcileNSPResponse> {
    const poller = await this.beginReconcileNSP(
      resourceGroupName,
      ruleName,
      configurationName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNSPNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param nextLink The nextLink from the previous successful call to the ListNSP method.
   * @param options The options parameters.
   */
  private _listNSPNext(
    resourceGroupName: string,
    ruleName: string,
    nextLink: string,
    options?: ScheduledQueryRuleListNSPNextOptionalParams,
  ): Promise<ScheduledQueryRuleListNSPNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, nextLink, options },
      listNSPNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listNSPOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/scheduledQueryRules/{ruleName}/networkSecurityPerimeterConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getNSPOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/scheduledQueryRules/{ruleName}/networkSecurityPerimeterConfigurations/{configurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfiguration,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.configurationName,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const reconcileNSPOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/scheduledQueryRules/{ruleName}/networkSecurityPerimeterConfigurations/{configurationName}/reconcile",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ScheduledQueryRuleReconcileNSPHeaders,
    },
    201: {
      headersMapper: Mappers.ScheduledQueryRuleReconcileNSPHeaders,
    },
    202: {
      headersMapper: Mappers.ScheduledQueryRuleReconcileNSPHeaders,
    },
    204: {
      headersMapper: Mappers.ScheduledQueryRuleReconcileNSPHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.configurationName,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNSPNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterConfigurationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.ruleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
